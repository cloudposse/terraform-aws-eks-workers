---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: terraform-aws-eks-workers

# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"

# Canonical GitHub repo
github_repo: cloudposse/terraform-aws-eks-workers

# Badges to display
badges:
  - name: "Build Status"
    image: "https://travis-ci.org/cloudposse/terraform-aws-eks-workers.svg?branch=master"
    url: "https://travis-ci.org/cloudposse/terraform-aws-eks-workers"
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/terraform-aws-eks-workers.svg"
    url: "https://github.com/cloudposse/terraform-aws-eks-workers/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

related:
  - name: "terraform-aws-ec2-autoscale-group"
    description: "Terraform module to provision Auto Scaling Group and Launch Template on AWS"
    url: "https://github.com/cloudposse/terraform-aws-ec2-autoscale-group"
  - name: "terraform-aws-ecs-container-definition"
    description: "Terraform module to generate well-formed JSON documents (container definitions) that are passed to the  aws_ecs_task_definition Terraform resource"
    url: "https://github.com/cloudposse/terraform-aws-ecs-container-definition"
  - name: "terraform-aws-ecs-alb-service-task"
    description: "Terraform module which implements an ECS service which exposes a web service via ALB"
    url: "https://github.com/cloudposse/terraform-aws-ecs-alb-service-task"
  - name: "erraform-aws-ecs-web-app"
    description: "Terraform module that implements a web app on ECS and supports autoscaling, CI/CD, monitoring, ALB integration, and much more"
    url: "https://github.com/cloudposse/terraform-aws-ecs-web-app"
  - name: "terraform-aws-ecs-codepipeline"
    description: "Terraform module for CI/CD with AWS Code Pipeline and Code Build for ECS"
    url: "https://github.com/cloudposse/terraform-aws-ecs-codepipeline"
  - name: "terraform-aws-ecs-cloudwatch-autoscaling"
    description: "Terraform module to autoscale ECS Service based on CloudWatch metrics"
    url: "https://github.com/cloudposse/terraform-aws-ecs-cloudwatch-autoscaling"
  - name: "terraform-aws-ecs-cloudwatch-sns-alarms"
    description: "Terraform module to create CloudWatch Alarms on ECS Service level metrics"
    url: "https://github.com/cloudposse/terraform-aws-ecs-cloudwatch-sns-alarms"
  - name: "terraform-aws-ec2-instance"
    description: "Terraform module for providing a general purpose EC2 instance"
    url: "https://github.com/cloudposse/terraform-aws-ec2-instance"
  - name: "terraform-aws-ec2-instance-group"
    description: "Terraform module for provisioning multiple general purpose EC2 hosts for stateful applications"
    url: "https://github.com/cloudposse/terraform-aws-ec2-instance-group"

# Short description of this project
description: |-
  Terraform module to provision AWS resources to run EC2 worker nodes for [Elastic Container Service for Kubernetes](https://aws.amazon.com/eks/).

  Instantiate it multiple times to create many EKS worker node pools with specific settings such as GPUs, EC2 instance types, or autoscale parameters.

introduction: |-
  The module provisions the following resources:

  - IAM Role and Instance Profile to allow Kubernetes nodes to access other AWS services
  - Security Group with rules for EKS workers to allow networking traffic
  - AutoScaling Group with Launch Template to configure and launch worker instances
  - AutoScaling Policies and CloudWatch Metric Alarms to monitor CPU utilization on the EC2 instances and scale the number of instance in the AutoScaling Group up or down.
  If you don't want to use the provided functionality, or want to provide your own policies, disable it by setting the variable `autoscaling_policies_enabled` to `"false"`.

# How to use this project
usage: |-

  For a complete example, see [examples/complete](examples/complete)

  ```hcl
  provider "aws" {
    region = "${var.region}"
  }

  locals {
    # The usage of the specific kubernetes.io/cluster/* resource tags below are required
    # for EKS and Kubernetes to discover and manage networking resources
    # https://www.terraform.io/docs/providers/aws/guides/eks-getting-started.html#base-vpc-networking
    tags = "${merge(var.tags, map("kubernetes.io/cluster/${var.cluster_name}", "shared"))}"
  }

  data "aws_availability_zones" "available" {}

  module "vpc" {
    source     = "git::https://github.com/cloudposse/terraform-aws-vpc.git?ref=master"
    namespace  = "${var.namespace}"
    stage      = "${var.stage}"
    name       = "${var.name}"
    attributes = "${var.attributes}"
    tags       = "${local.tags}"
    cidr_block = "10.0.0.0/16"
  }

  module "subnets" {
    source              = "git::https://github.com/cloudposse/terraform-aws-dynamic-subnets.git?ref=master"
    availability_zones  = ["${data.aws_availability_zones.available.names}"]
    namespace           = "${var.namespace}"
    stage               = "${var.stage}"
    name                = "${var.name}"
    attributes          = "${var.attributes}"
    tags                = "${local.tags}"
    region              = "${var.region}"
    vpc_id              = "${module.vpc.vpc_id}"
    igw_id              = "${module.vpc.igw_id}"
    cidr_block          = "${module.vpc.vpc_cidr_block}"
    nat_gateway_enabled = "true"
  }

  module "eks_workers" {
    source                             = "git::https://github.com/cloudposse/terraform-aws-eks-workers.git?ref=master"
    namespace                          = "${var.namespace}"
    stage                              = "${var.stage}"
    name                               = "${var.name}"
    attributes                         = "${var.attributes}"
    tags                               = "${var.tags}"
    image_id                           = "${var.image_id}"
    eks_worker_ami_name_filter         = "${var.eks_worker_ami_name_filter}"
    instance_type                      = "${var.instance_type}"
    vpc_id                             = "${module.vpc.vpc_id}"
    subnet_ids                         = ["${module.subnets.public_subnet_ids}"]
    health_check_type                  = "${var.health_check_type}"
    min_size                           = "${var.min_size}"
    max_size                           = "${var.max_size}"
    wait_for_capacity_timeout          = "${var.wait_for_capacity_timeout}"
    associate_public_ip_address        = "${var.associate_public_ip_address}"
    cluster_name                       = "${var.cluster_name}"
    cluster_endpoint                   = "${var.cluster_endpoint}"
    cluster_certificate_authority_data = "${var.cluster_certificate_authority_data}"
    cluster_security_group_id          = "${var.cluster_security_group_id}"

    # Auto-scaling policies and CloudWatch metric alarms
    autoscaling_policies_enabled           = "${var.autoscaling_policies_enabled}"
    cpu_utilization_high_threshold_percent = "${var.cpu_utilization_high_threshold_percent}"
    cpu_utilization_low_threshold_percent  = "${var.cpu_utilization_low_threshold_percent}"
  }
  ```

include:
  - "docs/targets.md"
  - "docs/terraform.md"

# Contributors to this project
contributors:
  - name: "Erik Osterman"
    github: "osterman"
  - name: "Andriy Knysh"
    github: "aknysh"
  - name: "Igor Rodionov"
    github: "goruha"
